extern crate test;

use crate::utils::EvmTestingContext;
use fluentbase_sdk::Address;
use hex_literal::hex;
use test::Bencher;

#[bench]
fn bench_evm_multicall(b: &mut Bencher) {
    let mut ctx = EvmTestingContext::default();
    const DEPLOYER_ADDRESS: Address = Address::ZERO;

    // Deploy Router contract
    let router_address = ctx.deploy_evm_tx(
        DEPLOYER_ADDRESS,
        hex::decode(include_bytes!("../../assets/Router.bin"))
            .unwrap()
            .into(),
    );

    let call_multicall = |ctx: &mut EvmTestingContext| {
        // Call two functions via multicall:
        // 1. greeting("Hello, World!")
        // 2. customGreeting("Custom Hello, World!")
        let result = ctx.call_evm_tx(
           DEPLOYER_ADDRESS,
           router_address,
           // Encoded calldata for multicall with two calls
           hex!("ac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000064f8194e480000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000e48656c6c6f2c20576f726c64212100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006436b83a9a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000015437573746f6d2048656c6c6f2c20576f726c642121000000000000000000000000").into(),
           Some(300_000_000),
           None,
       );
        assert!(result.is_success());
    };

    b.iter(|| {
        call_multicall(&mut ctx);
    });
}

#[bench]
fn bench_wasm_multicall(b: &mut Bencher) {
    let mut ctx = EvmTestingContext::default();
    const DEPLOYER_ADDRESS: Address = Address::ZERO;

    // Deploy Router contract (WASM version)
    let router_address = ctx.deploy_evm_tx(
        DEPLOYER_ADDRESS,
        include_bytes!("../../../examples/router-solidity/lib.wasm").into(),
    );

    let call_multicall = |ctx: &mut EvmTestingContext| {
        // Same multicall invocation as in EVM version
        let result = ctx.call_evm_tx(
           DEPLOYER_ADDRESS,
           router_address,
           hex!("ac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000064f8194e480000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000e48656c6c6f2c20576f726c64212100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006436b83a9a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000015437573746f6d2048656c6c6f2c20576f726c642121000000000000000000000000").into(),
           Some(300_000_000),
           None,
       );
        assert!(result.is_success());
    };

    b.iter(|| {
        call_multicall(&mut ctx);
    });
}
