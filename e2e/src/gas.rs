use crate::utils::{EvmTestingContext, TxBuilder};
use core::str::from_utf8;
use fluentbase_codec::byteorder::LittleEndian;
use fluentbase_sdk::{
    address,
    byteorder::ByteOrder,
    bytes,
    Address,
    SysFuncIdx,
    STATE_MAIN,
    SYSCALL_ID_CALL,
    U256,
};
use hex_literal::hex;
use revm::primitives::{ExecutionResult, Output};
use rwasm::{instruction_set, rwasm::RwasmModule};

#[test]
fn test_simple_nested_call() {
    let mut ctx = EvmTestingContext::default();
    const ACCOUNT1_ADDRESS: Address = address!("1111111111111111111111111111111111111111");
    const ACCOUNT2_ADDRESS: Address = address!("1111111111111111111111111111111111111112");
    const ACCOUNT3_ADDRESS: Address = address!("1111111111111111111111111111111111111113");
    let _account1 = ctx.add_wasm_contract(
        ACCOUNT1_ADDRESS,
        instruction_set! {
            ConsumeFuel(1000)
            I32Const(-100)
            Call(SysFuncIdx::EXIT)
        },
    );
    let _account2 = ctx.add_wasm_contract(
        ACCOUNT2_ADDRESS,
        instruction_set! {
            ConsumeFuel(2000)
            I32Const(-20)
            Call(SysFuncIdx::EXIT)
        },
    );
    let mut memory_section = vec![];
    memory_section.extend_from_slice(&SYSCALL_ID_CALL.0); // 0..32
    memory_section.extend_from_slice(ACCOUNT1_ADDRESS.as_slice()); // 32..
    memory_section.extend_from_slice(U256::ZERO.as_le_slice());
    memory_section.extend_from_slice(ACCOUNT2_ADDRESS.as_slice()); // 84..
    memory_section.extend_from_slice(U256::ZERO.as_le_slice());
    memory_section.extend_from_slice(&[0, 0, 0, 0]); // 136..
    assert_eq!(memory_section.len(), 140);
    let code_section = instruction_set! {
        // alloc and init memory
        I32Const(1)
        MemoryGrow
        Drop
        I32Const(0)
        I32Const(0)
        I32Const(memory_section.len() as u32)
        MemoryInit(0)
        DataDrop(0)
        // sys exec hash
        ConsumeFuel(10)
        I32Const(0) // hash32_ptr
        I32Const(32) // input_ptr
        I32Const(52) // input_len
        I32Const(0) // fuel_ptr
        I32Const(STATE_MAIN) // state
        Call(SysFuncIdx::EXEC)
        // sys exec hash
        ConsumeFuel(20)
        I32Const(0) // hash32_ptr
        I32Const(84) // input_ptr
        I32Const(52) // input_len
        I32Const(0) // fuel_ptr
        I32Const(STATE_MAIN) // state
        Call(SysFuncIdx::EXEC)
        // write the sum of two error codes into 1 byte result
        ConsumeFuel(30)
        I32Add
        LocalGet(1)
        I32Const(136)
        LocalSet(2)
        I32Store(0)
        // call "_write" func
        I32Const(136) // offset
        I32Const(4) // length
        Call(SysFuncIdx::WRITE_OUTPUT)
        // exit with 0 exit code
        ConsumeFuel(40)
        I32Const(0)
        Call(SysFuncIdx::EXIT)
    };
    let code_section_len = code_section.len() as u32;
    ctx.add_wasm_contract(
        ACCOUNT3_ADDRESS,
        RwasmModule {
            code_section,
            memory_section,
            func_section: vec![code_section_len],
            ..Default::default()
        },
    );
    let result = TxBuilder::call(&mut ctx, Address::ZERO, ACCOUNT3_ADDRESS, None)
        .gas_price(U256::ZERO)
        .exec();
    println!("{:?}", result);
    let output = result.output().unwrap_or_default();
    assert!(output.len() >= 4);
    let value = LittleEndian::read_i32(output.as_ref());
    assert_eq!(value, -120);
    assert!(result.is_success());
    // 21k is tx cost
    // + 2600 * 2 nested calls
    // + 5 wasm opcode (denominate 1000 + 2000 + 1126 -> 5)
    // Result: denominate from 30326 -> 26205
    assert_eq!(
        result.gas_used(),
        21000 + 2600 * 2 + (1000 + 2000 + 1126) / 1000 + 1
    );
}

#[test]
#[ignore]
fn test_deploy_gas_spend() {
    // deploy greeting WASM contract
    let mut ctx = EvmTestingContext::default();
    const DEPLOYER_ADDRESS: Address = Address::ZERO;

    let result = TxBuilder::create(
        &mut ctx,
        DEPLOYER_ADDRESS,
        include_bytes!("../../examples/greeting/lib.wasm").into(),
    )
    .exec();
    if !result.is_success() {
        println!("{:?}", result);
        println!(
            "{}",
            from_utf8(result.output().cloned().unwrap_or_default().as_ref()).unwrap_or("")
        );
    }
    // 62030 - init contract cost
    // 67400 - store space cost in fuel
    // 5126  - opcode cost in fuel
    assert_eq!(result.gas_used(), 62030 + (67400 + 5126) / 1000 + 1);
}

#[test]
fn test_blended_gas_spend_wasm_from_evm() {
    let mut ctx = EvmTestingContext::default();
    const ACCOUNT1_ADDRESS: Address = address!("1111111111111111111111111111111111111111");
    const ACCOUNT2_ADDRESS: Address = address!("1111111111111111111111111111111111111112");
    const DEPLOYER_ADDRESS: Address = Address::ZERO;

    let _account1 = ctx.add_wasm_contract(
        ACCOUNT1_ADDRESS,
        instruction_set! {
            ConsumeFuel(1000)
            I32Const(-71)
            Call(SysFuncIdx::EXIT)
        },
    );
    let _account2 = ctx.add_wasm_contract(
        ACCOUNT2_ADDRESS,
        instruction_set! {
            ConsumeFuel(2000)
            I32Const(-20)
            Call(SysFuncIdx::EXIT)
        },
    );

    let result = TxBuilder::create(&mut ctx, DEPLOYER_ADDRESS, hex!("608060405260b780600f5f395ff3fe6080604052348015600e575f5ffd5b50600436106026575f3560e01c806365becaf314602a575b5f5ffd5b60306032565b005b5f73111111111111111111111111111111111111111190505f60405180602001604052805f81525090505f5f9050604051825160208401818184375f5f83855f8a6107d0f1935050505050505056fea26469706673582212207eef72b1ab13ead60c06c9a0f00f0a2c74c2438d873e963f3b2bf9a2e092874564736f6c634300081c0033").into()).exec();
    if !result.is_success() {
        println!("Result: {:?}", result);
        println!(
            "{}",
            from_utf8(result.output().cloned().unwrap_or_default().as_ref()).unwrap_or("")
        );
    }
    let address = match result {
        ExecutionResult::Success { output, .. } => match output {
            Output::Create(_, address) => address.unwrap(),
            _ => panic!("expected 'create'"),
        },
        _ => panic!("expected 'success'"),
    };
    println!("Contract address: {:?}", address);
    let result = TxBuilder::call(
        &mut ctx,
        address!("f39Fd6e51aad88F6F4ce6aB8827279cffFb92266"),
        address,
        None,
    )
    .input(bytes!("65becaf3"))
    .exec();

    assert!(result.is_success());
    println!("Result: {:?}", result);
    // 21064 is tx cost
    // + 2600 call cost
    // + 1 call wasm code
    // + 255 evm opcodes cost
    assert_eq!(result.gas_used(), 21064 + 1 + 2600 + 255);
}

#[test]
fn test_blended_gas_spend_evm_from_wasm() {
    let mut ctx = EvmTestingContext::default();

    const DEPLOYER_ADDRESS: Address = Address::ZERO;
    const ACCOUNT3_ADDRESS: Address = address!("1111111111111111111111111111111111111113");

    let result = TxBuilder::create(&mut ctx, DEPLOYER_ADDRESS, hex!("6080604052610594806100115f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80633b2e97481461004357806345773e4e1461007357806348b8bcc314610091575b5f5ffd5b61005d600480360381019061005891906102e5565b6100af565b60405161006a9190610380565b60405180910390f35b61007b6100dd565b6040516100889190610380565b60405180910390f35b61009961011a565b6040516100a69190610380565b60405180910390f35b60605f8273ffffffffffffffffffffffffffffffffffffffff163190506100d58161012f565b915050919050565b60606040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b60605f4790506101298161012f565b91505090565b60605f8203610175576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610282565b5f8290505f5b5f82146101a457808061018d906103d6565b915050600a8261019d919061044a565b915061017b565b5f8167ffffffffffffffff8111156101bf576101be61047a565b5b6040519080825280601f01601f1916602001820160405280156101f15781602001600182028036833780820191505090505b5090505b5f851461027b578180610207906104a7565b925050600a8561021791906104ce565b603061022391906104fe565b60f81b81838151811061023957610238610531565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a85610274919061044a565b94506101f5565b8093505050505b919050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102b48261028b565b9050919050565b6102c4816102aa565b81146102ce575f5ffd5b50565b5f813590506102df816102bb565b92915050565b5f602082840312156102fa576102f9610287565b5b5f610307848285016102d1565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61035282610310565b61035c818561031a565b935061036c81856020860161032a565b61037581610338565b840191505092915050565b5f6020820190508181035f8301526103988184610348565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f819050919050565b5f6103e0826103cd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610412576104116103a0565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610454826103cd565b915061045f836103cd565b92508261046f5761046e61041d565b5b828204905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f6104b1826103cd565b91505f82036104c3576104c26103a0565b5b600182039050919050565b5f6104d8826103cd565b91506104e3836103cd565b9250826104f3576104f261041d565b5b828206905092915050565b5f610508826103cd565b9150610513836103cd565b925082820190508082111561052b5761052a6103a0565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212205f47a1f79c07854bad446dbc1572d306c5758cabc8296071e80f814e5ca99c8b64736f6c634300081c0033").into()).exec();
    if !result.is_success() {
        println!("Result: {:?}", result);
        println!(
            "{}",
            from_utf8(result.output().cloned().unwrap_or_default().as_ref()).unwrap_or("")
        );
    }
    let address = match result {
        ExecutionResult::Success { output, .. } => match output {
            Output::Create(_, address) => address.unwrap(),
            _ => panic!("expected 'create'"),
        },
        _ => panic!("expected 'success'"),
    };
    println!("Contract address: {:?}", address);

    let mut memory_section = vec![];
    memory_section.extend_from_slice(&SYSCALL_ID_CALL.0); // 0..32
    memory_section.extend_from_slice(address.as_slice()); // 32..
    memory_section.extend_from_slice(U256::ZERO.as_le_slice());
    memory_section.extend_from_slice(bytes!("45773e4e").to_vec().as_slice());

    let code_section = instruction_set! {
        // alloc and init memory
        I32Const(1)
        MemoryGrow
        Drop
        I32Const(0)
        I32Const(0)
        I32Const(memory_section.len() as u32)
        MemoryInit(0)
        DataDrop(0)
        // sys exec hash
        ConsumeFuel(10)
        I32Const(0) // hash32_ptr
        I32Const(32) // input_ptr
        I32Const(56) // input_len
        I32Const(0) // fuel_ptr
        I32Const(STATE_MAIN) // state
        Call(SysFuncIdx::EXEC)
        I32Const(0) // hash32_ptr
        I32Const(32) // input_ptr
        I32Const(56) // input_len
        I32Const(0) // fuel_ptr
        I32Const(STATE_MAIN) // state
        Call(SysFuncIdx::EXEC)
        Call(SysFuncIdx::EXIT)
    };
    let code_section_len = code_section.len() as u32;
    ctx.add_wasm_contract(
        ACCOUNT3_ADDRESS,
        RwasmModule {
            code_section,
            memory_section,
            func_section: vec![code_section_len],
            ..Default::default()
        },
    );
    let result = TxBuilder::call(
        &mut ctx,
        address!("f39Fd6e51aad88F6F4ce6aB8827279cffFb92266"),
        ACCOUNT3_ADDRESS,
        None,
    )
    .gas_price(U256::ZERO)
    .exec();

    println!("Result: {:?}", result);
    assert!(result.is_success());

    // 21064 is tx cost
    // + 2 call wasm code (1035 -> 2)
    // + 2600 cold call cost
    // + 637 evm opcodes cost
    // + 100 warm call cost
    // + 637 evm opcodes cost
    assert_eq!(result.gas_used(), 21000 + 2 + 2600 + 637 + 100 + 637);
}

#[test]
fn test_nitro_verifier_gas_spend() {
    let caller = address!("f39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
    let bytecode = include_bytes!("../../examples/nitro-verifier/lib.wasm");
    let mut ctx = EvmTestingContext::default();
    let address = ctx.deploy_evm_tx(caller, bytecode.into());
    // Example of valid attestation document
    // https://github.com/evervault/attestation-doc-validation/blob/main/test-data/valid-attestation-doc-base64
    let attestation_doc = bytes!("8444a1013822a0591220a9696d6f64756c655f69647827692d30393138663663353565336236316438392d656e633031386161386238653232383564313366646967657374665348413338346974696d657374616d701b0000018aa8d1692c6470637273b00058300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000158300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000258300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000358304a9329d69c836267b18abbf9f4a38889124490453419e426818626348d21f989dc930b1562682a9082887454e53425aa045830d0531b1400dd43288c82c226c16bf647c637dd5e4d9b4f7a8aaadc6d6760b854a06c7008cca0d15ca80094dd33aa58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f58300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006b63657274696669636174655902803082027c30820201a0030201020210018aa8b8e2285d130000000065086098300a06082a8648ce3d04030330818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30393138663663353565336236316438392e75732d656173742d312e6177732e6e6974726f2d656e636c61766573301e170d3233303931383134333730395a170d3233303931383137333731325a308193310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753313e303c06035504030c35692d30393138663663353565336236316438392d656e63303138616138623865323238356431332e75732d656173742d312e6177733076301006072a8648ce3d020106052b8104002203620004d966364b11a4a171ef783db158b6b1d7594739fb3b8ea0a7b60a484b2d9df549eb4d30b95f41a6fce7a3980188873f739490b41db447fddecb65ae443e49203023b3689298ecf15bd588729b96df1c2c5d5c2a290e32f31554d62f543616d0ffa31d301b300c0603551d130101ff04023000300b0603551d0f0404030206c0300a06082a8648ce3d0403030369003066023100c8b3fcbf79a6b7ec2e0f885dfeb60e669b98a2dc155dd7d3f927363c1dba8b4c721d9495d61bbc62e560aff4bab713e6023100f816abee9d7f4b6f47fac9ce3192fa94a24b6027ddafd5630a0f021623322a09c1b8f469e97e2891a27b0a40d584411968636162756e646c65845902153082021130820196a003020102021100f93175681b90afe11d46ccb4e4e7f856300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3139313032383133323830355a170d3439313032383134323830355a3049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b8104002203620004fc0254eba608c1f36870e29ada90be46383292736e894bfff672d989444b5051e534a4b1f6dbe3c0bc581a32b7b176070ede12d69a3fea211b66e752cf7dd1dd095f6f1370f4170843d9dc100121e4cf63012809664487c9796284304dc53ff4a3423040300f0603551d130101ff040530030101ff301d0603551d0e041604149025b50dd90547e796c396fa729dcf99a9df4b96300e0603551d0f0101ff040403020186300a06082a8648ce3d0403030369003066023100a37f2f91a1c9bd5ee7b8627c1698d255038e1f0343f95b63a9628c3d39809545a11ebcbf2e3b55d8aeee71b4c3d6adf3023100a2f39b1605b27028a5dd4ba069b5016e65b4fbde8fe0061d6a53197f9cdaf5d943bc61fc2beb03cb6fee8d2302f3dff65902c3308202bf30820244a003020102021068184d8ffbb171b19cc685d8e4b58ab7300a06082a8648ce3d0403033049310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753311b301906035504030c126177732e6e6974726f2d656e636c61766573301e170d3233303931373032303734355a170d3233313030373033303734355a3064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d636335343332313363663866346361342e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b810400220362000433a3c46cfef59e887d652628fab486a190114f72dc4592fb3a0c0d9d9f14257163cd7bdedade51fe183a2bc29fb3d302298b725f90bc800bf5f9b0328e9e2b7d5b58b72868307b355888a884d20afe92c7e91eb3be91a6930c05c8e428a20c65a381d53081d230120603551d130101ff040830060101ff020102301f0603551d230418301680149025b50dd90547e796c396fa729dcf99a9df4b96301d0603551d0e0416041457583badb7cc976738ed98092cc36183aac1d36b300e0603551d0f0101ff040403020186306c0603551d1f046530633061a05fa05d865b687474703a2f2f6177732d6e6974726f2d656e636c617665732d63726c2e73332e616d617a6f6e6177732e636f6d2f63726c2f61623439363063632d376436332d343262642d396539662d3539333338636236376638342e63726c300a06082a8648ce3d0403030369003066023100ed25470e163893a16a11add11166647e1618fa74e5db7a4d5d17b78fe9aaa7259d16fcb210325a46ca40add6b9e9d48c023100904f68622f5f8e5bbff01d21dc47989ec66b303aea0cd45865b9b7368215f58a6973c2b20af98c0e9a44362fb35bb4e9590319308203153082029ba003020102021100c8ddef6845627ed181a7a91e716c92f9300a06082a8648ce3d0403033064310b3009060355040613025553310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533136303406035504030c2d636335343332313363663866346361342e75732d656173742d312e6177732e6e6974726f2d656e636c61766573301e170d3233303931373139303335345a170d3233303932333134303335335a308189313c303a06035504030c33633466396430366336306437636239322e7a6f6e616c2e75732d656173742d312e6177732e6e6974726f2d656e636c61766573310c300a060355040b0c03415753310f300d060355040a0c06416d617a6f6e310b3009060355040613025553310b300906035504080c0257413110300e06035504070c0753656174746c653076301006072a8648ce3d020106052b8104002203620004edc17268efbb5649426ae7b34b5de689a9dc8650936cd2f979e08a49359db600f95eb5e144084674f677979275d100b85b47179d055d125cfe11057c79b1ea3e5c2f0ed4289bb699738a212a2f7893150ae8592aea4d9087d6484b68c34c2a3ca381ea3081e730120603551d130101ff040830060101ff020101301f0603551d2304183016801457583badb7cc976738ed98092cc36183aac1d36b301d0603551d0e04160414650f61726ac9f304b54c5b8abe2b6ec871e0c724300e0603551d0f0101ff0404030201863081800603551d1f047930773075a073a071866f687474703a2f2f63726c2d75732d656173742d312d6177732d6e6974726f2d656e636c617665732e73332e75732d656173742d312e616d617a6f6e6177732e636f6d2f63726c2f37316336376235382d663261642d346532652d383634632d3066383665643163343364322e63726c300a06082a8648ce3d040303036800306502303b3f3f4a0cf3d22220da3e5cc2ac14ee0a1a30e3225c3fddb8020b68ae4f4843e232f8f5ccc57a1b32a5d0e28adaddfb023100ebb89c6ff76d3a8139209c51b511bf80bc9f90d985e1a18bd4281b428d441ef0fef2507ef1ec061f9ab85806277cef615902833082027f30820204a003020102021464fb29c5ba37c8c7f539fe3991147ae7063e16f9300a06082a8648ce3d040303308189313c303a06035504030c33633466396430366336306437636239322e7a6f6e616c2e75732d656173742d312e6177732e6e6974726f2d656e636c61766573310c300a060355040b0c03415753310f300d060355040a0c06416d617a6f6e310b3009060355040613025553310b300906035504080c0257413110300e06035504070c0753656174746c65301e170d3233303931383034343634395a170d3233303931393034343634395a30818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30393138663663353565336236316438392e75732d656173742d312e6177732e6e6974726f2d656e636c617665733076301006072a8648ce3d020106052b81040022036200042c90cb367a3d124bc7a9dd58e7a18d3d2ec998051bc4d232396c89e10f90dbcbc7f77a8b047a5397b5f429dff27b69b2588a0a663581af059d40b07bcc407a9de216a688b82b931e0fa8caaff676cfe0177851c26c4dead495b466db7316de6ba326302430120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020204300a06082a8648ce3d04030303690030660231008d777a69f73a52ed061ae0dffcbf45d18aadf9a04e8f6d25830eff92d4a2d20e5294b69dd30ec98b9fdc3db2bdb3c62f023100b22ff1b3071c34eb9421eed0aae61bb2ebd945a660375bfbf9ab07722f2ec721a00d6531a3481ab2fc643592506b0a796a7075626c69635f6b6579f669757365725f64617461585b3059301306072a8648ce3d020106082a8648ce3d030107034200042afc52fe36bd5f190b5c90a7ef3349716dcbc4aa003dde71114b11d2faa6648e0713c527439746a8d23dab9e1b999e847762ef385bb5cf27295323b9908b2acb656e6f6e6365590100bba6bfd51866d2e4e095ba3277f208a4692e62f76b98595bf13204bc5f36be7a13120a5de19a3b5fcebcca0722983901db66d35c419c2e70ea8c7aa48a56df715ae4a39ad5fe0e4d056b2d8b2eb756b69fd231f86e8e39a1607ea5d9ab8d078c5d27147fdc2b0b5404c281f79a45381ed6533c048f38e3765b5e9776d36c7452b9d6cdae09ecfdd088c74b680dcf3bb520d0ff926074e7b6fc2c0b6a5d0b07adeba14295b01bdf7a155d0ad08f40d958ee6a837a5655a7fff35a16f7fb7e40aadaf39399f08987941950c50847e0232cd4a1d3161071f54fdad3e1f5706f4140b28859c169c0fc2526993e9d94d4657644100cd32efd6e6671ab4ae4119c1f215860efb3c8e015ab5748fc3a211c81739855a147003cdf46917edaf2fcf7c6d1d1beb535f2320f2a89c44f8500a796596d1af70dcfd950b59fdfeb6677c0992d7863236a289cc54a801f7caea200ae548301f059eaf8a7c3688e6c864d5dcada3fef");
    println!("calling nitro verifier...");
    let result = TxBuilder::call(&mut ctx, caller, address, None)
        .input(attestation_doc)
        .exec();
    println!("Result: {:?}", result);
    assert!(result.is_success());
}
