const {Web3, ETH_DATA_FORMAT} = require('web3');
const {hexToBytes, bytesToHex} = require('web3-utils');
const {ethRpcMethods} = require('web3-rpc-methods');
const RLP = require('rlp');

const DEPLOYER_PRIVATE_KEY = 'ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80';

function dec2hex(n) {
    let res = n ? [n % 256].concat(dec2hex(~~(n / 256))) : [];
    return res.reverse()
}

const EMPTY_STRING_CODE = 0x80;
const EMPTY_LIST_CODE = 0xC0;

class RlpHeader {

    constructor(is_list = false, payload_length = 0) {
        this.is_list = is_list
        this.payload_length = payload_length
    }

    encode() {
        let out = []
        if (this.payload_length < 56) {
            let code = EMPTY_STRING_CODE
            if (this.is_list) {
                code = EMPTY_LIST_CODE
            }
            out.push(code + self.payload_length)
        } else {
            let len_be = dec2hex(this.payload_length);
            console.log(`len_be: ${JSON.stringify(len_be)}`)
            let code = 0xB7;
            if (this.is_list) {
                code = 0xF7
            }
            out.push(code + len_be.length)
            out.push(...len_be)
        }
        return out
    }
}

const main = async () => {
    if (process.argv.length < 2) {
        console.log(`You must specify local or remote flag`);
        console.log(`Example: node send-blended.js --local`);
        process.exit(-1);
    }
    let args = process.argv.slice(2);
    const checkFlag = (param) => {
        let indexOf = args.indexOf(param)
        if (indexOf < 0) {
            return false
        }
        args.splice(indexOf, 1)
        return true
    };
    let isLocal = checkFlag('--local')
    let isDev = checkFlag('--dev')

    let web3Url = '';
    if (isLocal) {
        web3Url = 'http://127.0.0.1:8545';
    } else if (isDev) {
        web3Url = 'https://rpc.dev.thefluent.xyz/';
    } else {
        console.log(`You must specify --dev or --local flag!`);
        console.log(`Example: node deploy-contract.js --local`);
        process.exit(-1);
    }

    const web3 = new Web3(web3Url);

    let fluentTxType = 0x52;
    let fuelExecEnv = 0x00;

    console.log('Forming transaction...');
    let rawTxBytes = [];
    let fuelTxHex = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000008000000000000000100000000000000010000000000000001240400000000000000000000000000000000000000000000ca41dab08590eda44231b6fcf4bb110c852b24f030bf996a89f02cccc57eb5f10000000000006a13f5bd94297364b371180b42da369f74918912b80c9947d6a174c0c6e2c95fae1d0000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028f974f02ef30fe9ee3e62b50f24a56d9042b4bc0251f23248d92990408afa49f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040f8f6ccbd3005a7900db1de6987e439e09c37ea2ac56eb6c2d82eeb37c3d6450bbf7514dceee2d94dc24f6f610d10f13fc4e6f6dbca6a0d3864b77a2bc7e6f384";
    let fuelTxBytes = Array.from(hexToBytes(fuelTxHex));

    let fuelTxBytesHeader = new RlpHeader(false, fuelTxBytes.length);
    let fuelTxBytesHeaderRlp = fuelTxBytesHeader.encode();
    rawTxBytes.push(...fuelTxBytesHeaderRlp);
    rawTxBytes.push(...fuelTxBytes);
    let rawTxBytesHex = Buffer.from(rawTxBytes).toString("hex");
    console.log(`rawTxBytesHex: ${Buffer.from(rawTxBytes).toString("hex")}`);

    // "b901b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000008000000000000000100000000000000010000000000000001240400000000000000000000000000000000000000000000ca41dab08590eda44231b6fcf4bb110c852b24f030bf996a89f02cccc57eb5f10000000000006a13f5bd94297364b371180b42da369f74918912b80c9947d6a174c0c6e2c95fae1d0000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028f974f02ef30fe9ee3e62b50f24a56d9042b4bc0251f23248d92990408afa49f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040f8f6ccbd3005a7900db1de6987e439e09c37ea2ac56eb6c2d82eeb37c3d6450bbf7514dceee2d94dc24f6f610d10f13fc4e6f6dbca6a0d3864b77a2bc7e6f384";
    rawTxBytes = [fuelExecEnv].concat(rawTxBytes)
    console.log(`rawTxBytesHex: ${Buffer.from(rawTxBytes).toString("hex")}`);
    // "00b901b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000008000000000000000100000000000000010000000000000001240400000000000000000000000000000000000000000000ca41dab08590eda44231b6fcf4bb110c852b24f030bf996a89f02cccc57eb5f10000000000006a13f5bd94297364b371180b42da369f74918912b80c9947d6a174c0c6e2c95fae1d0000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028f974f02ef30fe9ee3e62b50f24a56d9042b4bc0251f23248d92990408afa49f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040f8f6ccbd3005a7900db1de6987e439e09c37ea2ac56eb6c2d82eeb37c3d6450bbf7514dceee2d94dc24f6f610d10f13fc4e6f6dbca6a0d3864b77a2bc7e6f384";
    let typedTxBytesHeader = new RlpHeader(true, rawTxBytes.length);
    let typedTxBytesHeaderRlp = typedTxBytesHeader.encode();
    rawTxBytes = typedTxBytesHeaderRlp.concat(rawTxBytes)
    console.log(`rawTxBytesHex: ${Buffer.from(rawTxBytes).toString("hex")}`);
    // expected: "f901b400b901b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000008000000000000000100000000000000010000000000000001240400000000000000000000000000000000000000000000ca41dab08590eda44231b6fcf4bb110c852b24f030bf996a89f02cccc57eb5f10000000000006a13f5bd94297364b371180b42da369f74918912b80c9947d6a174c0c6e2c95fae1d0000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028f974f02ef30fe9ee3e62b50f24a56d9042b4bc0251f23248d92990408afa49f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040f8f6ccbd3005a7900db1de6987e439e09c37ea2ac56eb6c2d82eeb37c3d6450bbf7514dceee2d94dc24f6f610d10f13fc4e6f6dbca6a0d3864b77a2bc7e6f384"
    rawTxBytes = [fluentTxType].concat(rawTxBytes)
    console.log(`rawTxBytesHex: ${Buffer.from(rawTxBytes).toString("hex")}`);
    // expected: "52f901b400b901b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000008000000000000000100000000000000010000000000000001240400000000000000000000000000000000000000000000ca41dab08590eda44231b6fcf4bb110c852b24f030bf996a89f02cccc57eb5f10000000000006a13f5bd94297364b371180b42da369f74918912b80c9947d6a174c0c6e2c95fae1d0000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028f974f02ef30fe9ee3e62b50f24a56d9042b4bc0251f23248d92990408afa49f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040f8f6ccbd3005a7900db1de6987e439e09c37ea2ac56eb6c2d82eeb37c3d6450bbf7514dceee2d94dc24f6f610d10f13fc4e6f6dbca6a0d3864b77a2bc7e6f384"
    // expected: "52 f901b4 00 b901b0 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000008000000000000000100000000000000010000000000000001240400000000000000000000000000000000000000000000ca41dab08590eda44231b6fcf4bb110c852b24f030bf996a89f02cccc57eb5f10000000000006a13f5bd94297364b371180b42da369f74918912b80c9947d6a174c0c6e2c95fae1d0000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028f974f02ef30fe9ee3e62b50f24a56d9042b4bc0251f23248d92990408afa49f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040f8f6ccbd3005a7900db1de6987e439e09c37ea2ac56eb6c2d82eeb37c3d6450bbf7514dceee2d94dc24f6f610d10f13fc4e6f6dbca6a0d3864b77a2bc7e6f384";


    let rawTxHex = "0x" + Buffer.from(rawTxBytes).toString("hex");
    console.log(`txHex ${rawTxHex}`)
    console.log(`rawTxBytes.length ${rawTxBytes.length}`)
    // const signedTransaction = await web3.eth.accounts.signTransaction(rawTx, privateKey)

    let txHashHex = "0x8cb9b9a97b430ecc0863db11d2b8e2db85eed9b85c994ac6063f9fbb3b7f19bb";
    try {
        txHashHex = await ethRpcMethods.sendRawTransaction(web3.requestManager, rawTxHex);
    } catch (e) {
        console.log(`failed to sendRawTransaction: '${e}'`)
    }
    console.log(`txHashHex: ${txHashHex}`);
    try {
        let tx = await ethRpcMethods.getTransactionByHash(web3.requestManager, txHashHex);
        console.log(`getTransactionByHash: ${JSON.stringify(tx)}`)
    } catch (e) {
        console.log(`failed to getTransactionByHash: '${e}'`)
    }
}

main().then(console.log).catch(console.error);
