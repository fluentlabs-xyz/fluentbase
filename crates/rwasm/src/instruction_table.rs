use crate::RwasmExecutor;

pub type VisitInstruction<T> = fn(&mut RwasmExecutor<T>);

pub type InstructionTable<T> = [VisitInstruction<T>; 0x100];

#[inline]
pub const fn make_instruction_table<T>() -> InstructionTable<T> {
    use crate::module::Instruction::*;
    const {
        let mut tables: InstructionTable<T> = [crate::opcodes::visit_unreachable_wrapped; 0x100];
        tables[Unreachable as usize] = crate::opcodes::visit_unreachable_wrapped;
        tables[LocalGet as usize] = crate::opcodes::visit_local_get;
        tables[LocalSet as usize] = crate::opcodes::visit_local_set;
        tables[LocalTee as usize] = crate::opcodes::visit_local_tee;
        tables[Br as usize] = crate::opcodes::visit_br;
        tables[BrIfEqz as usize] = crate::opcodes::visit_br_if;
        tables[BrIfNez as usize] = crate::opcodes::visit_br_if_nez;
        tables[BrAdjust as usize] = crate::opcodes::visit_br_adjust;
        tables[BrAdjustIfNez as usize] = crate::opcodes::visit_br_adjust_if_nez;
        tables[BrTable as usize] = crate::opcodes::visit_br_table;
        tables[ConsumeFuel as usize] = crate::opcodes::visit_consume_fuel_wrapped;
        tables[Return as usize] = crate::opcodes::visit_return;
        tables[ReturnIfNez as usize] = crate::opcodes::visit_return_if_nez;
        tables[ReturnCallInternal as usize] = crate::opcodes::visit_return_call_internal_wrapped;
        tables[ReturnCall as usize] = crate::opcodes::visit_return_call_wrapped;
        tables[ReturnCallIndirect as usize] = crate::opcodes::visit_return_call_indirect_wrapped;
        tables[CallInternal as usize] = crate::opcodes::visit_call_internal_wrapped;
        tables[Call as usize] = crate::opcodes::visit_call_wrapped;
        tables[CallIndirect as usize] = crate::opcodes::visit_call_indirect_wrapped;
        tables[SignatureCheck as usize] = crate::opcodes::visit_signature_check_wrapped;
        tables[Drop as usize] = crate::opcodes::visit_drop;
        tables[Select as usize] = crate::opcodes::visit_select;
        tables[GlobalGet as usize] = crate::opcodes::visit_global_get;
        tables[GlobalSet as usize] = crate::opcodes::visit_global_set;
        tables[I32Load as usize] = crate::opcodes::visit_i32_load_wrapped;
        tables[I64Load as usize] = crate::opcodes::visit_i64_load_wrapped;
        tables[F32Load as usize] = crate::opcodes::visit_f32_load_wrapped; // float
        tables[F64Load as usize] = crate::opcodes::visit_f64_load_wrapped; // float
        tables[I32Load8S as usize] = crate::opcodes::visit_i32_load_i8_s_wrapped;
        tables[I32Load8U as usize] = crate::opcodes::visit_i32_load_i8_u_wrapped;
        tables[I32Load16S as usize] = crate::opcodes::visit_i32_load_i16_s_wrapped;
        tables[I32Load16U as usize] = crate::opcodes::visit_i32_load_i16_u_wrapped;
        tables[I64Load8S as usize] = crate::opcodes::visit_i64_load_i8_s_wrapped;
        tables[I64Load8U as usize] = crate::opcodes::visit_i64_load_i8_u_wrapped;
        tables[I64Load16S as usize] = crate::opcodes::visit_i64_load_i16_s_wrapped;
        tables[I64Load16U as usize] = crate::opcodes::visit_i64_load_i16_u_wrapped;
        tables[I64Load32S as usize] = crate::opcodes::visit_i64_load_i32_s_wrapped;
        tables[I64Load32U as usize] = crate::opcodes::visit_i64_load_i32_u_wrapped;
        tables[I32Store as usize] = crate::opcodes::visit_i32_store_wrapped;
        tables[I64Store as usize] = crate::opcodes::visit_i64_store_wrapped;
        tables[F32Store as usize] = crate::opcodes::visit_f32_store_wrapped; // float
        tables[F64Store as usize] = crate::opcodes::visit_f64_store_wrapped; // float
        tables[I32Store8 as usize] = crate::opcodes::visit_i32_store_8_wrapped;
        tables[I32Store16 as usize] = crate::opcodes::visit_i32_store_16_wrapped;
        tables[I64Store8 as usize] = crate::opcodes::visit_i64_store_8_wrapped;
        tables[I64Store16 as usize] = crate::opcodes::visit_i64_store_16_wrapped;
        tables[I64Store32 as usize] = crate::opcodes::visit_i64_store_32_wrapped;
        tables[MemorySize as usize] = crate::opcodes::visit_memory_size;
        tables[MemoryGrow as usize] = crate::opcodes::visit_memory_grow_wrapped;
        tables[MemoryFill as usize] = crate::opcodes::visit_memory_fill_wrapped;
        tables[MemoryCopy as usize] = crate::opcodes::visit_memory_copy_wrapped;
        tables[MemoryInit as usize] = crate::opcodes::visit_memory_init_wrapped;
        tables[DataDrop as usize] = crate::opcodes::visit_data_drop;
        tables[TableSize as usize] = crate::opcodes::visit_table_size;
        tables[TableGrow as usize] = crate::opcodes::visit_table_grow_wrapped;
        tables[TableFill as usize] = crate::opcodes::visit_table_fill_wrapped;
        tables[TableGet as usize] = crate::opcodes::visit_table_get_wrapped;
        tables[TableSet as usize] = crate::opcodes::visit_table_set_wrapped;
        tables[TableCopy as usize] = crate::opcodes::visit_table_copy_wrapped;
        tables[TableInit as usize] = crate::opcodes::visit_table_init_wrapped;
        tables[ElemDrop as usize] = crate::opcodes::visit_element_drop;
        tables[RefFunc as usize] = crate::opcodes::visit_ref_func;
        tables[I32Const as usize] = crate::opcodes::visit_i32_i64_const;
        tables[I64Const as usize] = crate::opcodes::visit_i32_i64_const;
        tables[F32Const as usize] = crate::opcodes::visit_i32_i64_const; // float
        tables[F64Const as usize] = crate::opcodes::visit_i32_i64_const; // float
        tables[I32Eqz as usize] = crate::opcodes::visit_i32_eqz;
        tables[I32Eq as usize] = crate::opcodes::visit_i32_eq;
        tables[I32Ne as usize] = crate::opcodes::visit_i32_ne;
        tables[I32LtS as usize] = crate::opcodes::visit_i32_lt_s;
        tables[I32LtU as usize] = crate::opcodes::visit_i32_lt_u;
        tables[I32GtS as usize] = crate::opcodes::visit_i32_gt_s;
        tables[I32GtU as usize] = crate::opcodes::visit_i32_gt_u;
        tables[I32LeS as usize] = crate::opcodes::visit_i32_le_s;
        tables[I32LeU as usize] = crate::opcodes::visit_i32_le_u;
        tables[I32GeS as usize] = crate::opcodes::visit_i32_ge_s;
        tables[I32GeU as usize] = crate::opcodes::visit_i32_ge_u;
        tables[I64Eqz as usize] = crate::opcodes::visit_i64_eqz;
        tables[I64Eq as usize] = crate::opcodes::visit_i64_eq;
        tables[I64Ne as usize] = crate::opcodes::visit_i64_ne;
        tables[I64LtS as usize] = crate::opcodes::visit_i64_lt_s;
        tables[I64LtU as usize] = crate::opcodes::visit_i64_lt_u;
        tables[I64GtS as usize] = crate::opcodes::visit_i64_gt_s;
        tables[I64GtU as usize] = crate::opcodes::visit_i64_gt_u;
        tables[I64LeS as usize] = crate::opcodes::visit_i64_le_s;
        tables[I64LeU as usize] = crate::opcodes::visit_i64_le_u;
        tables[I64GeS as usize] = crate::opcodes::visit_i64_ge_s;
        tables[I64GeU as usize] = crate::opcodes::visit_i64_ge_u;
        tables[F32Eq as usize] = crate::opcodes::visit_f32_eq; // float
        tables[F32Ne as usize] = crate::opcodes::visit_f32_ne; // float
        tables[F32Lt as usize] = crate::opcodes::visit_f32_lt; // float
        tables[F32Gt as usize] = crate::opcodes::visit_f32_gt; // float
        tables[F32Le as usize] = crate::opcodes::visit_f32_le; // float
        tables[F32Ge as usize] = crate::opcodes::visit_f32_ge; // float
        tables[F64Eq as usize] = crate::opcodes::visit_f64_eq; // float
        tables[F64Ne as usize] = crate::opcodes::visit_f64_ne; // float
        tables[F64Lt as usize] = crate::opcodes::visit_f64_lt; // float
        tables[F64Gt as usize] = crate::opcodes::visit_f64_gt; // float
        tables[F64Le as usize] = crate::opcodes::visit_f64_le; // float
        tables[F64Ge as usize] = crate::opcodes::visit_f64_ge; // float
        tables[I32Clz as usize] = crate::opcodes::visit_i32_clz;
        tables[I32Ctz as usize] = crate::opcodes::visit_i32_ctz;
        tables[I32Popcnt as usize] = crate::opcodes::visit_i32_popcnt;
        tables[I32Add as usize] = crate::opcodes::visit_i32_add;
        tables[I32Sub as usize] = crate::opcodes::visit_i32_sub;
        tables[I32Mul as usize] = crate::opcodes::visit_i32_mul;
        tables[I32DivS as usize] = crate::opcodes::visit_i32_div_s_wrapped;
        tables[I32DivU as usize] = crate::opcodes::visit_i32_div_u_wrapped;
        tables[I32RemS as usize] = crate::opcodes::visit_i32_rem_s_wrapped;
        tables[I32RemU as usize] = crate::opcodes::visit_i32_rem_u_wrapped;
        tables[I32And as usize] = crate::opcodes::visit_i32_and;
        tables[I32Or as usize] = crate::opcodes::visit_i32_or;
        tables[I32Xor as usize] = crate::opcodes::visit_i32_xor;
        tables[I32Shl as usize] = crate::opcodes::visit_i32_shl;
        tables[I32ShrS as usize] = crate::opcodes::visit_i32_shr_s;
        tables[I32ShrU as usize] = crate::opcodes::visit_i32_shr_u;
        tables[I32Rotl as usize] = crate::opcodes::visit_i32_rotl;
        tables[I32Rotr as usize] = crate::opcodes::visit_i32_rotr;
        tables[I64Clz as usize] = crate::opcodes::visit_i64_clz;
        tables[I64Ctz as usize] = crate::opcodes::visit_i64_ctz;
        tables[I64Popcnt as usize] = crate::opcodes::visit_i64_popcnt;
        tables[I64Add as usize] = crate::opcodes::visit_i64_add;
        tables[I64Sub as usize] = crate::opcodes::visit_i64_sub;
        tables[I64Mul as usize] = crate::opcodes::visit_i64_mul;
        tables[I64DivS as usize] = crate::opcodes::visit_i64_div_s_wrapped;
        tables[I64DivU as usize] = crate::opcodes::visit_i64_div_u_wrapped;
        tables[I64RemS as usize] = crate::opcodes::visit_i64_rem_s_wrapped;
        tables[I64RemU as usize] = crate::opcodes::visit_i64_rem_u_wrapped;
        tables[I64And as usize] = crate::opcodes::visit_i64_and;
        tables[I64Or as usize] = crate::opcodes::visit_i64_or;
        tables[I64Xor as usize] = crate::opcodes::visit_i64_xor;
        tables[I64Shl as usize] = crate::opcodes::visit_i64_shl;
        tables[I64ShrS as usize] = crate::opcodes::visit_i64_shr_s;
        tables[I64ShrU as usize] = crate::opcodes::visit_i64_shr_u;
        tables[I64Rotl as usize] = crate::opcodes::visit_i64_rotl;
        tables[I64Rotr as usize] = crate::opcodes::visit_i64_rotr;
        tables[F32Abs as usize] = crate::opcodes::visit_f32_abs; // float
        tables[F32Neg as usize] = crate::opcodes::visit_f32_neg; // float
        tables[F32Ceil as usize] = crate::opcodes::visit_f32_ceil; // float
        tables[F32Floor as usize] = crate::opcodes::visit_f32_floor; // float
        tables[F32Trunc as usize] = crate::opcodes::visit_f32_trunc; // float
        tables[F32Nearest as usize] = crate::opcodes::visit_f32_nearest; // float
        tables[F32Sqrt as usize] = crate::opcodes::visit_f32_sqrt; // float
        tables[F32Add as usize] = crate::opcodes::visit_f32_add; // float
        tables[F32Sub as usize] = crate::opcodes::visit_f32_sub; // float
        tables[F32Mul as usize] = crate::opcodes::visit_f32_mul; // float
        tables[F32Div as usize] = crate::opcodes::visit_f32_div; // float
        tables[F32Min as usize] = crate::opcodes::visit_f32_min; // float
        tables[F32Max as usize] = crate::opcodes::visit_f32_max; // float
        tables[F32Copysign as usize] = crate::opcodes::visit_f32_copysign; // float
        tables[F64Abs as usize] = crate::opcodes::visit_f64_abs; // float
        tables[F64Neg as usize] = crate::opcodes::visit_f64_neg; // float
        tables[F64Ceil as usize] = crate::opcodes::visit_f64_ceil; // float
        tables[F64Floor as usize] = crate::opcodes::visit_f64_floor; // float
        tables[F64Trunc as usize] = crate::opcodes::visit_f64_trunc; // float
        tables[F64Nearest as usize] = crate::opcodes::visit_f64_nearest; // float
        tables[F64Sqrt as usize] = crate::opcodes::visit_f64_sqrt; // float
        tables[F64Add as usize] = crate::opcodes::visit_f64_add; // float
        tables[F64Sub as usize] = crate::opcodes::visit_f64_sub; // float
        tables[F64Mul as usize] = crate::opcodes::visit_f64_mul; // float
        tables[F64Div as usize] = crate::opcodes::visit_f64_div; // float
        tables[F64Min as usize] = crate::opcodes::visit_f64_min; // float
        tables[F64Max as usize] = crate::opcodes::visit_f64_max; // float
        tables[F64Copysign as usize] = crate::opcodes::visit_f64_copysign; // float
        tables[I32WrapI64 as usize] = crate::opcodes::visit_i32_wrap_i64;
        tables[I32TruncF32S as usize] = crate::opcodes::visit_i32_trunc_f32_s_wrapped; // float
        tables[I32TruncF32U as usize] = crate::opcodes::visit_i32_trunc_f32_u_wrapped; // float
        tables[I32TruncF64S as usize] = crate::opcodes::visit_i32_trunc_f64_s_wrapped; // float
        tables[I32TruncF64U as usize] = crate::opcodes::visit_i32_trunc_f64_u_wrapped; // float
        tables[I64ExtendI32S as usize] = crate::opcodes::visit_i64_extend_i32_s;
        tables[I64ExtendI32U as usize] = crate::opcodes::visit_i64_extend_i32_u;
        tables[I64TruncF32S as usize] = crate::opcodes::visit_i64_trunc_f32_s_wrapped; // float
        tables[I64TruncF32U as usize] = crate::opcodes::visit_i64_trunc_f32_u_wrapped; // float
        tables[I64TruncF64S as usize] = crate::opcodes::visit_i64_trunc_f64_s_wrapped; // float
        tables[I64TruncF64U as usize] = crate::opcodes::visit_i64_trunc_f64_u_wrapped; // float
        tables[F32ConvertI32S as usize] = crate::opcodes::visit_f32_convert_i32_s; // float
        tables[F32ConvertI32U as usize] = crate::opcodes::visit_f32_convert_i32_u; // float
        tables[F32ConvertI64S as usize] = crate::opcodes::visit_f32_convert_i64_s; // float
        tables[F32ConvertI64U as usize] = crate::opcodes::visit_f32_convert_i64_u; // float
        tables[F32DemoteF64 as usize] = crate::opcodes::visit_f32_demote_f64; // float
        tables[F64ConvertI32S as usize] = crate::opcodes::visit_f64_convert_i32_s; // float
        tables[F64ConvertI32U as usize] = crate::opcodes::visit_f64_convert_i32_u; // float
        tables[F64ConvertI64S as usize] = crate::opcodes::visit_f64_convert_i64_s; // float
        tables[F64ConvertI64U as usize] = crate::opcodes::visit_f64_convert_i64_u; // float
        tables[F64PromoteF32 as usize] = crate::opcodes::visit_f64_promote_f32; // float
        tables[I32TruncSatF32S as usize] = crate::opcodes::visit_i32_trunc_sat_f32_s; // float
        tables[I32TruncSatF32U as usize] = crate::opcodes::visit_i32_trunc_sat_f32_u; // float
        tables[I32TruncSatF64S as usize] = crate::opcodes::visit_i32_trunc_sat_f64_s; // float
        tables[I32TruncSatF64U as usize] = crate::opcodes::visit_i32_trunc_sat_f64_u; // float
        tables[I64TruncSatF32S as usize] = crate::opcodes::visit_i64_trunc_sat_f32_s; // float
        tables[I64TruncSatF32U as usize] = crate::opcodes::visit_i64_trunc_sat_f32_u; // float
        tables[I64TruncSatF64S as usize] = crate::opcodes::visit_i64_trunc_sat_f64_s; // float
        tables[I64TruncSatF64U as usize] = crate::opcodes::visit_i64_trunc_sat_f64_u; // float
        tables[I32Extend8S as usize] = crate::opcodes::visit_i32_extend8_s;
        tables[I32Extend16S as usize] = crate::opcodes::visit_i32_extend16_s;
        tables[I64Extend8S as usize] = crate::opcodes::visit_i64_extend8_s;
        tables[I64Extend16S as usize] = crate::opcodes::visit_i64_extend16_s;
        tables[I64Extend32S as usize] = crate::opcodes::visit_i64_extend32_s;
        tables
    }
}
