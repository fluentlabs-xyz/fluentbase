---
source: crates/codec-derive/src/lib.rs
expression: get_generated_code(input)
---
impl<
    B: ::fluentbase_sdk::codec::byteorder::ByteOrder,
    const ALIGN: usize,
> ::fluentbase_sdk::codec::Encoder<B, ALIGN, { true }, { true }> for TestStruct
where
    bool: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { true }, { true }>,
    Bytes: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { true }, { true }>,
    Vec<u32>: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { true }, { true }>,
{
    const HEADER_SIZE: usize = 0
        + <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::HEADER_SIZE
        + <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::HEADER_SIZE
        + <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::HEADER_SIZE;
    const IS_DYNAMIC: bool = false
        || <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::IS_DYNAMIC
        || <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::IS_DYNAMIC
        || <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<B, ALIGN, { true }, { true }>>::IS_DYNAMIC;
    fn encode(
        &self,
        buf: &mut ::fluentbase_sdk::codec::bytes::BytesMut,
        offset: usize,
    ) -> Result<(), ::fluentbase_sdk::codec::CodecError> {
        let aligned_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        let is_dynamic = <Self as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::IS_DYNAMIC;
        let aligned_header_size = 0
            + if <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <bool as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { true },
                    >>::HEADER_SIZE,
                )
            }
            + if <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Bytes as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { true },
                    >>::HEADER_SIZE,
                )
            }
            + if <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Vec<
                        u32,
                    > as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { true },
                    >>::HEADER_SIZE,
                )
            };
        let mut tail = if is_dynamic {
            let buf_len = buf.len();
            let offset = if buf_len != 0 { buf_len } else { 32 };
            ::fluentbase_sdk::codec::write_u32_aligned::<
                B,
                ALIGN,
            >(buf, aligned_offset, offset as u32);
            if buf.len() < aligned_header_size + offset {
                buf.resize(aligned_header_size + offset, 0);
            }
            buf.split_off(offset)
        } else {
            if buf.len() < aligned_offset + aligned_header_size {
                buf.resize(aligned_offset + aligned_header_size, 0);
            }
            buf.split_off(aligned_offset)
        };
        let mut tail_offset = 0;
        if <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::IS_DYNAMIC {
            <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::encode(&self.bool_val, &mut tail, tail_offset)?;
            tail_offset += ::fluentbase_sdk::codec::align_up::<ALIGN>(4);
        } else {
            <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::encode(&self.bool_val, &mut tail, tail_offset)?;
            tail_offset
                += ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <bool as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { true },
                    >>::HEADER_SIZE,
                );
        }
        if <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::IS_DYNAMIC {
            <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::encode(&self.bytes_val, &mut tail, tail_offset)?;
            tail_offset += ::fluentbase_sdk::codec::align_up::<ALIGN>(4);
        } else {
            <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::encode(&self.bytes_val, &mut tail, tail_offset)?;
            tail_offset
                += ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Bytes as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { true },
                    >>::HEADER_SIZE,
                );
        }
        if <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::IS_DYNAMIC {
            <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::encode(&self.vec_val, &mut tail, tail_offset)?;
            tail_offset += ::fluentbase_sdk::codec::align_up::<ALIGN>(4);
        } else {
            <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::encode(&self.vec_val, &mut tail, tail_offset)?;
            tail_offset
                += ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Vec<
                        u32,
                    > as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { true },
                    >>::HEADER_SIZE,
                );
        }
        buf.unsplit(tail);
        Ok(())
    }
    fn decode(
        buf: &impl ::fluentbase_sdk::codec::bytes::Buf,
        offset: usize,
    ) -> Result<Self, ::fluentbase_sdk::codec::CodecError> {
        let mut aligned_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        let mut tmp = if <Self as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::IS_DYNAMIC {
            let offset = ::fluentbase_sdk::codec::read_u32_aligned::<
                B,
                ALIGN,
            >(&buf.chunk(), aligned_offset)? as usize;
            &buf.chunk()[offset..]
        } else {
            &buf.chunk()[aligned_offset..]
        };
        let mut current_offset = 0;
        let bool_val = <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::decode(&mut tmp, current_offset)?;
        current_offset
            += if <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <bool as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { true },
                    >>::HEADER_SIZE,
                )
            };
        let bytes_val = <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::decode(&mut tmp, current_offset)?;
        current_offset
            += if <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Bytes as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { true },
                    >>::HEADER_SIZE,
                )
            };
        let vec_val = <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::decode(&mut tmp, current_offset)?;
        current_offset
            += if <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { true },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Vec<
                        u32,
                    > as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { true },
                    >>::HEADER_SIZE,
                )
            };
        Ok(TestStruct {
            bool_val,
            bytes_val,
            vec_val,
        })
    }
    fn partial_decode(
        buffer: &impl ::fluentbase_sdk::codec::bytes::Buf,
        offset: usize,
    ) -> Result<(usize, usize), ::fluentbase_sdk::codec::CodecError> {
        let aligned_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        if <Self as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { true },
        >>::IS_DYNAMIC {
            let data_offset = ::fluentbase_sdk::codec::read_u32_aligned::<
                B,
                ALIGN,
            >(&buffer.chunk(), aligned_offset)? as usize;
            Ok((
                data_offset,
                <Self as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { true },
                    { true },
                >>::HEADER_SIZE,
            ))
        } else {
            Ok((
                aligned_offset,
                <Self as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { true },
                    { true },
                >>::HEADER_SIZE,
            ))
        }
    }
}
impl<
    B: ::fluentbase_sdk::codec::byteorder::ByteOrder,
    const ALIGN: usize,
> ::fluentbase_sdk::codec::Encoder<B, ALIGN, { true }, { false }> for TestStruct
where
    bool: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { true }, { false }>,
    Bytes: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { true }, { false }>,
    Vec<u32>: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { true }, { false }>,
{
    const HEADER_SIZE: usize = 0
        + <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::HEADER_SIZE
        + <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::HEADER_SIZE
        + <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::HEADER_SIZE;
    const IS_DYNAMIC: bool = false
        || <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::IS_DYNAMIC
        || <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::IS_DYNAMIC
        || <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::IS_DYNAMIC;
    fn encode(
        &self,
        buf: &mut ::fluentbase_sdk::codec::bytes::BytesMut,
        offset: usize,
    ) -> Result<(), ::fluentbase_sdk::codec::CodecError> {
        let aligned_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        let is_dynamic = <Self as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::IS_DYNAMIC;
        let aligned_header_size = 0
            + if <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <bool as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { false },
                    >>::HEADER_SIZE,
                )
            }
            + if <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Bytes as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { false },
                    >>::HEADER_SIZE,
                )
            }
            + if <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Vec<
                        u32,
                    > as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { false },
                    >>::HEADER_SIZE,
                )
            };
        let mut tail = if is_dynamic {
            let buf_len = buf.len();
            let offset = if buf_len != 0 { buf_len } else { 32 };
            ::fluentbase_sdk::codec::write_u32_aligned::<
                B,
                ALIGN,
            >(buf, aligned_offset, offset as u32);
            if buf.len() < aligned_header_size + offset {
                buf.resize(aligned_header_size + offset, 0);
            }
            buf.split_off(offset)
        } else {
            if buf.len() < aligned_offset + aligned_header_size {
                buf.resize(aligned_offset + aligned_header_size, 0);
            }
            buf.split_off(aligned_offset)
        };
        let mut tail_offset = 0;
        if <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::IS_DYNAMIC {
            <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::encode(&self.bool_val, &mut tail, tail_offset)?;
            tail_offset += ::fluentbase_sdk::codec::align_up::<ALIGN>(4);
        } else {
            <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::encode(&self.bool_val, &mut tail, tail_offset)?;
            tail_offset
                += ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <bool as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { false },
                    >>::HEADER_SIZE,
                );
        }
        if <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::IS_DYNAMIC {
            <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::encode(&self.bytes_val, &mut tail, tail_offset)?;
            tail_offset += ::fluentbase_sdk::codec::align_up::<ALIGN>(4);
        } else {
            <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::encode(&self.bytes_val, &mut tail, tail_offset)?;
            tail_offset
                += ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Bytes as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { false },
                    >>::HEADER_SIZE,
                );
        }
        if <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::IS_DYNAMIC {
            <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::encode(&self.vec_val, &mut tail, tail_offset)?;
            tail_offset += ::fluentbase_sdk::codec::align_up::<ALIGN>(4);
        } else {
            <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::encode(&self.vec_val, &mut tail, tail_offset)?;
            tail_offset
                += ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Vec<
                        u32,
                    > as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { false },
                    >>::HEADER_SIZE,
                );
        }
        buf.unsplit(tail);
        Ok(())
    }
    fn decode(
        buf: &impl ::fluentbase_sdk::codec::bytes::Buf,
        offset: usize,
    ) -> Result<Self, ::fluentbase_sdk::codec::CodecError> {
        let mut aligned_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        let mut tmp = if <Self as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::IS_DYNAMIC {
            let offset = ::fluentbase_sdk::codec::read_u32_aligned::<
                B,
                ALIGN,
            >(&buf.chunk(), aligned_offset)? as usize;
            &buf.chunk()[offset..]
        } else {
            &buf.chunk()[aligned_offset..]
        };
        let mut current_offset = 0;
        let bool_val = <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::decode(&mut tmp, current_offset)?;
        current_offset
            += if <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <bool as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { false },
                    >>::HEADER_SIZE,
                )
            };
        let bytes_val = <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::decode(&mut tmp, current_offset)?;
        current_offset
            += if <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Bytes as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { false },
                    >>::HEADER_SIZE,
                )
            };
        let vec_val = <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::decode(&mut tmp, current_offset)?;
        current_offset
            += if <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { true },
                { false },
            >>::IS_DYNAMIC {
                32
            } else {
                ::fluentbase_sdk::codec::align_up::<
                    ALIGN,
                >(
                    <Vec<
                        u32,
                    > as ::fluentbase_sdk::codec::Encoder<
                        B,
                        ALIGN,
                        { true },
                        { false },
                    >>::HEADER_SIZE,
                )
            };
        Ok(TestStruct {
            bool_val,
            bytes_val,
            vec_val,
        })
    }
    fn partial_decode(
        buffer: &impl ::fluentbase_sdk::codec::bytes::Buf,
        offset: usize,
    ) -> Result<(usize, usize), ::fluentbase_sdk::codec::CodecError> {
        let aligned_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        if <Self as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { true },
            { false },
        >>::IS_DYNAMIC {
            let data_offset = ::fluentbase_sdk::codec::read_u32_aligned::<
                B,
                ALIGN,
            >(&buffer.chunk(), aligned_offset)? as usize;
            Ok((
                data_offset,
                <Self as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { true },
                    { false },
                >>::HEADER_SIZE,
            ))
        } else {
            Ok((
                aligned_offset,
                <Self as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { true },
                    { false },
                >>::HEADER_SIZE,
            ))
        }
    }
}
impl<
    B: ::fluentbase_sdk::codec::byteorder::ByteOrder,
    const ALIGN: usize,
> ::fluentbase_sdk::codec::Encoder<B, ALIGN, { false }, { true }> for TestStruct
where
    bool: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { false }, { true }>,
    Bytes: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { false }, { true }>,
    Vec<u32>: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { false }, { true }>,
{
    const HEADER_SIZE: usize = 0
        + ::fluentbase_sdk::codec::align_up::<
            ALIGN,
        >(
            <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { false },
                { true },
            >>::HEADER_SIZE,
        )
        + ::fluentbase_sdk::codec::align_up::<
            ALIGN,
        >(
            <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { false },
                { true },
            >>::HEADER_SIZE,
        )
        + ::fluentbase_sdk::codec::align_up::<
            ALIGN,
        >(
            <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { false },
                { true },
            >>::HEADER_SIZE,
        );
    const IS_DYNAMIC: bool = false
        || <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::IS_DYNAMIC
        || <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::IS_DYNAMIC
        || <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::IS_DYNAMIC;
    fn encode(
        &self,
        buf: &mut ::fluentbase_sdk::codec::bytes::BytesMut,
        offset: usize,
    ) -> Result<(), ::fluentbase_sdk::codec::CodecError> {
        let mut current_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        let header_size = <Self as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::HEADER_SIZE;
        if buf.len() < current_offset + header_size {
            buf.resize(current_offset + header_size, 0);
        }
        <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::encode(&self.bool_val, buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <bool as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { true },
                >>::HEADER_SIZE,
            );
        <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::encode(&self.bytes_val, buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <Bytes as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { true },
                >>::HEADER_SIZE,
            );
        <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::encode(&self.vec_val, buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <Vec<
                    u32,
                > as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { true },
                >>::HEADER_SIZE,
            );
        Ok(())
    }
    fn decode(
        buf: &impl ::fluentbase_sdk::codec::bytes::Buf,
        offset: usize,
    ) -> Result<Self, ::fluentbase_sdk::codec::CodecError> {
        let mut current_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        let bool_val = <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::decode(buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <bool as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { true },
                >>::HEADER_SIZE,
            );
        let bytes_val = <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::decode(buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <Bytes as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { true },
                >>::HEADER_SIZE,
            );
        let vec_val = <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { true },
        >>::decode(buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <Vec<
                    u32,
                > as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { true },
                >>::HEADER_SIZE,
            );
        Ok(TestStruct {
            bool_val,
            bytes_val,
            vec_val,
        })
    }
    fn partial_decode(
        buffer: &impl ::fluentbase_sdk::codec::bytes::Buf,
        offset: usize,
    ) -> Result<(usize, usize), ::fluentbase_sdk::codec::CodecError> {
        let aligned_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        Ok((
            aligned_offset,
            <Self as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { false },
                { true },
            >>::HEADER_SIZE,
        ))
    }
}
impl<
    B: ::fluentbase_sdk::codec::byteorder::ByteOrder,
    const ALIGN: usize,
> ::fluentbase_sdk::codec::Encoder<B, ALIGN, { false }, { false }> for TestStruct
where
    bool: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { false }, { false }>,
    Bytes: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { false }, { false }>,
    Vec<u32>: ::fluentbase_sdk::codec::Encoder<B, ALIGN, { false }, { false }>,
{
    const HEADER_SIZE: usize = 0
        + ::fluentbase_sdk::codec::align_up::<
            ALIGN,
        >(
            <bool as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { false },
                { false },
            >>::HEADER_SIZE,
        )
        + ::fluentbase_sdk::codec::align_up::<
            ALIGN,
        >(
            <Bytes as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { false },
                { false },
            >>::HEADER_SIZE,
        )
        + ::fluentbase_sdk::codec::align_up::<
            ALIGN,
        >(
            <Vec<
                u32,
            > as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { false },
                { false },
            >>::HEADER_SIZE,
        );
    const IS_DYNAMIC: bool = false
        || <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::IS_DYNAMIC
        || <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::IS_DYNAMIC
        || <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::IS_DYNAMIC;
    fn encode(
        &self,
        buf: &mut ::fluentbase_sdk::codec::bytes::BytesMut,
        offset: usize,
    ) -> Result<(), ::fluentbase_sdk::codec::CodecError> {
        let mut current_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        let header_size = <Self as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::HEADER_SIZE;
        if buf.len() < current_offset + header_size {
            buf.resize(current_offset + header_size, 0);
        }
        <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::encode(&self.bool_val, buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <bool as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { false },
                >>::HEADER_SIZE,
            );
        <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::encode(&self.bytes_val, buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <Bytes as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { false },
                >>::HEADER_SIZE,
            );
        <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::encode(&self.vec_val, buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <Vec<
                    u32,
                > as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { false },
                >>::HEADER_SIZE,
            );
        Ok(())
    }
    fn decode(
        buf: &impl ::fluentbase_sdk::codec::bytes::Buf,
        offset: usize,
    ) -> Result<Self, ::fluentbase_sdk::codec::CodecError> {
        let mut current_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        let bool_val = <bool as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::decode(buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <bool as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { false },
                >>::HEADER_SIZE,
            );
        let bytes_val = <Bytes as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::decode(buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <Bytes as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { false },
                >>::HEADER_SIZE,
            );
        let vec_val = <Vec<
            u32,
        > as ::fluentbase_sdk::codec::Encoder<
            B,
            ALIGN,
            { false },
            { false },
        >>::decode(buf, current_offset)?;
        current_offset
            += ::fluentbase_sdk::codec::align_up::<
                ALIGN,
            >(
                <Vec<
                    u32,
                > as ::fluentbase_sdk::codec::Encoder<
                    B,
                    ALIGN,
                    { false },
                    { false },
                >>::HEADER_SIZE,
            );
        Ok(TestStruct {
            bool_val,
            bytes_val,
            vec_val,
        })
    }
    fn partial_decode(
        buffer: &impl ::fluentbase_sdk::codec::bytes::Buf,
        offset: usize,
    ) -> Result<(usize, usize), ::fluentbase_sdk::codec::CodecError> {
        let aligned_offset = ::fluentbase_sdk::codec::align_up::<ALIGN>(offset);
        Ok((
            aligned_offset,
            <Self as ::fluentbase_sdk::codec::Encoder<
                B,
                ALIGN,
                { false },
                { false },
            >>::HEADER_SIZE,
        ))
    }
}
