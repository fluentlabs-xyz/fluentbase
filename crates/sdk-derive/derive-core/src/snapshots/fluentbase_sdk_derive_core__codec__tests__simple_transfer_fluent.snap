---
source: crates/sdk-derive/derive-core/src/codec.rs
expression: formatted
---
pub type TransferCallArgs = (u64, String);
#[derive(Debug, Clone, PartialEq)]
pub struct TransferCall(pub TransferCallArgs);
pub type TransferReturnArgs = (String,);
#[derive(Debug, Clone, PartialEq)]
pub struct TransferReturn(pub TransferReturnArgs);
const _: () = {
    impl TransferCall {
        pub const SELECTOR: [u8; 4] = [87u8, 160u8, 36u8, 253u8];
        pub const SIGNATURE: &'static str = "transfer(uint64,string)";
        /// Creates a new call instance from arguments
        pub fn new(args: TransferCallArgs) -> Self {
            Self(args)
        }
        /// Encodes this call to bytes including selector
        pub fn encode(&self) -> fluentbase_sdk::codec::bytes::Bytes {
            let mut buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            let args = self.0.clone();
            fluentbase_sdk::codec::encoder::FluentABI::encode(
                    &(args.0, args.1),
                    &mut buf,
                    0,
                )
                .expect("Failed to encode values");
            let encoded_args = buf.freeze();
            let clean_args = if fluentbase_sdk::codec::encoder::FluentABI::<
                TransferCallArgs,
            >::is_dynamic() {
                encoded_args[4..].to_vec()
            } else {
                encoded_args.to_vec()
            };
            Self::SELECTOR.iter().copied().chain(clean_args).collect()
        }
        /// Decodes call arguments from bytes
        pub fn decode(
            buf: &impl fluentbase_sdk::codec::bytes::Buf,
        ) -> Result<Self, fluentbase_sdk::codec::CodecError> {
            use fluentbase_sdk::codec::bytes::BufMut;
            let mut combined_buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            combined_buf
                .put_slice(
                    &if fluentbase_sdk::codec::encoder::FluentABI::<
                        TransferCallArgs,
                    >::is_dynamic() {
                        (4_u32).to_le_bytes().to_vec()
                    } else {
                        ::alloc::vec::Vec::new()
                    },
                );
            combined_buf.put_slice(buf.chunk());
            let args = fluentbase_sdk::codec::encoder::FluentABI::<
                TransferCallArgs,
            >::decode(&combined_buf.freeze(), 0)?;
            Ok(Self(args))
        }
    }
    impl ::core::ops::Deref for TransferCall {
        type Target = TransferCallArgs;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl TransferReturn {
        /// Creates a new return instance from values
        pub fn new(args: TransferReturnArgs) -> Self {
            Self(args)
        }
        /// Encodes the return values to bytes
        pub fn encode(&self) -> fluentbase_sdk::codec::bytes::Bytes {
            let mut buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            let args = self.0.clone();
            fluentbase_sdk::codec::encoder::FluentABI::encode(&(args.0,), &mut buf, 0)
                .expect("Failed to encode values");
            let encoded_args = buf.freeze();
            let clean_args = if fluentbase_sdk::codec::encoder::FluentABI::<
                TransferReturnArgs,
            >::is_dynamic() {
                encoded_args[4..].to_vec()
            } else {
                encoded_args.to_vec()
            };
            clean_args.into()
        }
        /// Decodes return values from bytes
        pub fn decode(
            buf: &impl fluentbase_sdk::codec::bytes::Buf,
        ) -> Result<Self, fluentbase_sdk::codec::CodecError> {
            use fluentbase_sdk::codec::bytes::BufMut;
            let mut combined_buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            combined_buf
                .put_slice(
                    &if fluentbase_sdk::codec::encoder::FluentABI::<
                        TransferReturnArgs,
                    >::is_dynamic() {
                        (4_u32).to_le_bytes().to_vec()
                    } else {
                        ::alloc::vec::Vec::new()
                    },
                );
            combined_buf.put_slice(buf.chunk());
            let args = fluentbase_sdk::codec::encoder::FluentABI::<
                TransferReturnArgs,
            >::decode(&combined_buf.freeze(), 0)?;
            Ok(Self(args))
        }
    }
    impl ::core::ops::Deref for TransferReturn {
        type Target = TransferReturnArgs;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
};
