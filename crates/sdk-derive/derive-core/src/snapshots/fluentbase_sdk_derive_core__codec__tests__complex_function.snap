---
source: crates/sdk-derive/derive-core/src/codec.rs
expression: formatted
---
pub type ComplexOpCallArgs = (Vec<u8>, Vec<(u64, String)>);
#[derive(Debug, Clone, PartialEq)]
pub struct ComplexOpCall(pub ComplexOpCallArgs);
pub type ComplexOpReturnArgs = (u64, String, Vec<u8>);
#[derive(Debug, Clone, PartialEq)]
pub struct ComplexOpReturn(pub ComplexOpReturnArgs);
const _: () = {
    impl ComplexOpCall {
        pub const SELECTOR: [u8; 4] = [167u8, 195u8, 200u8, 15u8];
        pub const SIGNATURE: &'static str = "complexOp(uint8[],(uint64,string)[])";
        /// Creates a new call instance from arguments
        pub fn new(args: ComplexOpCallArgs) -> Self {
            Self(args)
        }
        /// Encodes this call to bytes including selector
        pub fn encode(&self) -> fluentbase_sdk::codec::bytes::Bytes {
            let mut buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            let args = self.0.clone();
            fluentbase_sdk::codec::encoder::SolidityABI::encode(
                    &(args.0, args.1),
                    &mut buf,
                    0,
                )
                .expect("Failed to encode values");
            let encoded_args = buf.freeze();
            let clean_args = if fluentbase_sdk::codec::encoder::SolidityABI::<
                ComplexOpCallArgs,
            >::is_dynamic() {
                encoded_args[32..].to_vec()
            } else {
                encoded_args.to_vec()
            };
            Self::SELECTOR.iter().copied().chain(clean_args).collect()
        }
        /// Decodes call arguments from bytes
        pub fn decode(
            buf: &impl fluentbase_sdk::codec::bytes::Buf,
        ) -> Result<Self, fluentbase_sdk::codec::CodecError> {
            use fluentbase_sdk::codec::bytes::BufMut;
            let mut combined_buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            combined_buf
                .put_slice(
                    &if fluentbase_sdk::codec::encoder::SolidityABI::<
                        ComplexOpCallArgs,
                    >::is_dynamic() {
                        ::fluentbase_sdk::U256::from(32).to_be_bytes::<32>().to_vec()
                    } else {
                        ::alloc::vec::Vec::new()
                    },
                );
            combined_buf.put_slice(buf.chunk());
            let args = fluentbase_sdk::codec::encoder::SolidityABI::<
                ComplexOpCallArgs,
            >::decode(&combined_buf.freeze(), 0)?;
            Ok(Self(args))
        }
    }
    impl ::core::ops::Deref for ComplexOpCall {
        type Target = ComplexOpCallArgs;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl ComplexOpReturn {
        /// Creates a new return instance from values
        pub fn new(args: ComplexOpReturnArgs) -> Self {
            Self(args)
        }
        /// Encodes the return values to bytes
        pub fn encode(&self) -> fluentbase_sdk::codec::bytes::Bytes {
            let mut buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            let args = self.0.clone();
            fluentbase_sdk::codec::encoder::SolidityABI::encode(&args, &mut buf, 0)
                .expect("Failed to encode values");
            let encoded_args = buf.freeze();
            let clean_args = if fluentbase_sdk::codec::encoder::SolidityABI::<
                ComplexOpReturnArgs,
            >::is_dynamic() {
                encoded_args[32..].to_vec()
            } else {
                encoded_args.to_vec()
            };
            clean_args.into()
        }
        /// Decodes return values from bytes
        pub fn decode(
            buf: &impl fluentbase_sdk::codec::bytes::Buf,
        ) -> Result<Self, fluentbase_sdk::codec::CodecError> {
            use fluentbase_sdk::codec::bytes::BufMut;
            let mut combined_buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            combined_buf
                .put_slice(
                    &if fluentbase_sdk::codec::encoder::SolidityABI::<
                        ComplexOpReturnArgs,
                    >::is_dynamic() {
                        ::fluentbase_sdk::U256::from(32).to_be_bytes::<32>().to_vec()
                    } else {
                        ::alloc::vec::Vec::new()
                    },
                );
            combined_buf.put_slice(buf.chunk());
            let args = fluentbase_sdk::codec::encoder::SolidityABI::<
                ComplexOpReturnArgs,
            >::decode(&combined_buf.freeze(), 0)?;
            Ok(Self(args))
        }
    }
    impl ::core::ops::Deref for ComplexOpReturn {
        type Target = ComplexOpReturnArgs;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
};
