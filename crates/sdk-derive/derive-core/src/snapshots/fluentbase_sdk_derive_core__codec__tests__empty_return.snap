---
source: crates/sdk-derive/derive-core/src/codec.rs
expression: formatted
---
pub type EmptyReturnCallArgs = ();
#[derive(Debug, Clone, PartialEq)]
pub struct EmptyReturnCall(pub EmptyReturnCallArgs);
pub type EmptyReturnReturnArgs = ();
#[derive(Debug, Clone, PartialEq)]
pub struct EmptyReturnReturn(pub EmptyReturnReturnArgs);
const _: () = {
    impl EmptyReturnCall {
        pub const SELECTOR: [u8; 4] = [84u8, 181u8, 137u8, 63u8];
        pub const SIGNATURE: &'static str = "emptyReturn()";
        /// Creates a new call instance from arguments
        pub fn new(args: EmptyReturnCallArgs) -> Self {
            Self(args)
        }
        /// Encodes this call to bytes including selector
        pub fn encode(&self) -> fluentbase_sdk::codec::bytes::Bytes {
            let mut buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            fluentbase_sdk::codec::encoder::SolidityABI::encode(&(), &mut buf, 0)
                .expect("Failed to encode values");
            let encoded_args = buf.freeze();
            let clean_args = if fluentbase_sdk::codec::encoder::SolidityABI::<
                EmptyReturnCallArgs,
            >::is_dynamic() {
                encoded_args[32..].to_vec()
            } else {
                encoded_args.to_vec()
            };
            Self::SELECTOR.iter().copied().chain(clean_args).collect()
        }
        /// Decodes call arguments from bytes
        pub fn decode(
            buf: &impl fluentbase_sdk::codec::bytes::Buf,
        ) -> Result<Self, fluentbase_sdk::codec::CodecError> {
            use fluentbase_sdk::codec::bytes::BufMut;
            let mut combined_buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            combined_buf
                .put_slice(
                    &if fluentbase_sdk::codec::encoder::SolidityABI::<
                        EmptyReturnCallArgs,
                    >::is_dynamic() {
                        ::fluentbase_sdk::U256::from(32).to_be_bytes::<32>().to_vec()
                    } else {
                        ::alloc::vec::Vec::new()
                    },
                );
            combined_buf.put_slice(buf.chunk());
            let args = fluentbase_sdk::codec::encoder::SolidityABI::<
                EmptyReturnCallArgs,
            >::decode(&combined_buf.freeze(), 0)?;
            Ok(Self(args))
        }
    }
    impl ::core::ops::Deref for EmptyReturnCall {
        type Target = EmptyReturnCallArgs;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl EmptyReturnReturn {
        /// Creates a new return instance from values
        pub fn new(args: EmptyReturnReturnArgs) -> Self {
            Self(args)
        }
        /// Encodes the return values to bytes
        pub fn encode(&self) -> fluentbase_sdk::codec::bytes::Bytes {
            let mut buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            fluentbase_sdk::codec::encoder::SolidityABI::encode(&(), &mut buf, 0)
                .expect("Failed to encode values");
            let encoded_args = buf.freeze();
            let clean_args = if fluentbase_sdk::codec::encoder::SolidityABI::<
                EmptyReturnReturnArgs,
            >::is_dynamic() {
                encoded_args[32..].to_vec()
            } else {
                encoded_args.to_vec()
            };
            clean_args.into()
        }
        /// Decodes return values from bytes
        pub fn decode(
            buf: &impl fluentbase_sdk::codec::bytes::Buf,
        ) -> Result<Self, fluentbase_sdk::codec::CodecError> {
            use fluentbase_sdk::codec::bytes::BufMut;
            let mut combined_buf = fluentbase_sdk::codec::bytes::BytesMut::new();
            combined_buf
                .put_slice(
                    &if fluentbase_sdk::codec::encoder::SolidityABI::<
                        EmptyReturnReturnArgs,
                    >::is_dynamic() {
                        ::fluentbase_sdk::U256::from(32).to_be_bytes::<32>().to_vec()
                    } else {
                        ::alloc::vec::Vec::new()
                    },
                );
            combined_buf.put_slice(buf.chunk());
            let args = fluentbase_sdk::codec::encoder::SolidityABI::<
                EmptyReturnReturnArgs,
            >::decode(&combined_buf.freeze(), 0)?;
            Ok(Self(args))
        }
    }
    impl ::core::ops::Deref for EmptyReturnReturn {
        type Target = EmptyReturnReturnArgs;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
};
