use crate::compiler::Translator;
use wazm_core::{InstructionSet, OpCode, UntypedValue, WazmResult, MAX_MEMORY_SIZE};
use wazm_wasmi::Instruction;

impl Translator for Instruction {
    fn translate(&self, result: &mut InstructionSet) -> WazmResult<()> {
        use wazm_wasmi::Instruction as WI;
        let instr = match *self {
            WI::Unreachable => OpCode::Unreachable,
            WI::ConsumeFuel(fuel) => OpCode::ConsumeFuel(fuel),
            WI::Drop => OpCode::Drop,
            WI::Select => OpCode::Select,

            WI::LocalGet(local_depth) => OpCode::LocalGet(local_depth),
            WI::LocalSet(local_depth) => OpCode::LocalSet(local_depth),
            WI::LocalTee(local_depth) => OpCode::LocalTee(local_depth),

            WI::GlobalGet(index) => OpCode::GlobalGet(index),
            WI::GlobalSet(index) => OpCode::GlobalSet(index),

            WI::I32Load(offset) => OpCode::I32Load(offset),
            WI::I64Load(offset) => OpCode::I64Load(offset),
            WI::F32Load(offset) => OpCode::F32Load(offset),
            WI::F64Load(offset) => OpCode::F64Load(offset),
            WI::I32Load8S(offset) => OpCode::I32Load8S(offset),
            WI::I32Load8U(offset) => OpCode::I32Load8U(offset),
            WI::I32Load16S(offset) => OpCode::I32Load16S(offset),
            WI::I32Load16U(offset) => OpCode::I32Load16U(offset),
            WI::I64Load8S(offset) => OpCode::I64Load8S(offset),
            WI::I64Load8U(offset) => OpCode::I64Load8U(offset),
            WI::I64Load16S(offset) => OpCode::I64Load16S(offset),
            WI::I64Load16U(offset) => OpCode::I64Load16U(offset),
            WI::I64Load32S(offset) => OpCode::I64Load32S(offset),
            WI::I64Load32U(offset) => OpCode::I64Load32U(offset),
            WI::I32Store(offset) => OpCode::I32Store(offset),
            WI::I64Store(offset) => OpCode::I64Store(offset),
            WI::F32Store(offset) => OpCode::F32Store(offset),
            WI::F64Store(offset) => OpCode::F64Store(offset),
            WI::I32Store8(offset) => OpCode::I32Store8(offset),
            WI::I32Store16(offset) => OpCode::I32Store16(offset),
            WI::I64Store8(offset) => OpCode::I64Store8(offset),
            WI::I64Store16(offset) => OpCode::I64Store16(offset),
            WI::I64Store32(offset) => OpCode::I64Store32(offset),

            WI::MemorySize => OpCode::I32Const(UntypedValue::from(MAX_MEMORY_SIZE)),
            WI::MemoryGrow => OpCode::MemoryGrow,
            WI::MemoryFill => OpCode::MemoryFill,
            WI::MemoryCopy => OpCode::MemoryCopy,
            WI::MemoryInit(index) => OpCode::MemoryInit(index),
            WI::DataDrop(index) => OpCode::DataDrop(index),
            WI::TableSize(index) => OpCode::TableSize(index),
            WI::TableGrow(index) => OpCode::TableGrow(index),
            WI::TableFill(index) => OpCode::TableFill(index),
            WI::TableGet(index) => OpCode::TableGet(index),
            WI::TableSet(index) => OpCode::TableSet(index),
            WI::TableCopy { .. } => *self,
            WI::TableInit { .. } => *self,
            WI::ElemDrop(index) => OpCode::ElemDrop(index),
            WI::RefFunc(index) => OpCode::RefFunc(index),

            WI::I64Const(untyped_value) => OpCode::I64Const(UntypedValue::from(untyped_value.to_bits())),
            WI::I32Const(untyped_value) => OpCode::I32Const(UntypedValue::from(untyped_value.to_bits())),
            WI::I32Eqz => OpCode::I32Eqz,
            WI::I32Eq => OpCode::I32Eq,
            WI::I32Ne => OpCode::I32Ne,
            WI::I32LtS => OpCode::I32LtS,
            WI::I32LtU => OpCode::I32LtU,
            WI::I32GtS => OpCode::I32GtS,
            WI::I32GtU => OpCode::I32GtU,
            WI::I32LeS => OpCode::I32LeS,
            WI::I32LeU => OpCode::I32LeU,
            WI::I32GeS => OpCode::I32GeS,
            WI::I32GeU => OpCode::I32GeU,
            WI::I64Eqz => OpCode::I64Eqz,
            WI::I64Eq => OpCode::I64Eq,
            WI::I64Ne => OpCode::I64Ne,
            WI::I64LtS => OpCode::I64LtS,
            WI::I64LtU => OpCode::I64LtU,
            WI::I64GtS => OpCode::I64GtS,
            WI::I64GtU => OpCode::I64GtU,
            WI::I64LeS => OpCode::I64LeS,
            WI::I64LeU => OpCode::I64LeU,
            WI::I64GeS => OpCode::I64GeS,
            WI::I64GeU => OpCode::I64GeU,
            WI::I32Clz => OpCode::I32Clz,
            WI::I32Ctz => OpCode::I32Ctz,
            WI::I32Popcnt => OpCode::I32Popcnt,
            WI::I32Add => OpCode::I32Add,
            WI::I32Sub => OpCode::I32Sub,
            WI::I32Mul => OpCode::I32Mul,
            WI::I32DivS => OpCode::I32DivS,
            WI::I32DivU => OpCode::I32DivU,
            WI::I32RemS => OpCode::I32RemS,
            WI::I32RemU => OpCode::I32RemU,
            WI::I32And => OpCode::I32And,
            WI::I32Or => OpCode::I32Or,
            WI::I32Xor => OpCode::I32Xor,
            WI::I32Shl => OpCode::I32Shl,
            WI::I32ShrS => OpCode::I32ShrS,
            WI::I32ShrU => OpCode::I32ShrU,
            WI::I32Rotl => OpCode::I32Rotl,
            WI::I32Rotr => OpCode::I32Rotr,
            WI::I64Clz => OpCode::I64Clz,
            WI::I64Ctz => OpCode::I64Ctz,
            WI::I64Popcnt => OpCode::I64Popcnt,
            WI::I64Add => OpCode::I64Add,
            WI::I64Sub => OpCode::I64Sub,
            WI::I64Mul => OpCode::I64Mul,
            WI::I64DivS => OpCode::I64DivS,
            WI::I64DivU => OpCode::I64DivU,
            WI::I64RemS => OpCode::I64RemS,
            WI::I64RemU => OpCode::I64RemU,
            WI::I64And => OpCode::I64And,
            WI::I64Or => OpCode::I64Or,
            WI::I64Xor => OpCode::I64Xor,
            WI::I64Shl => OpCode::I64Shl,
            WI::I64ShrS => OpCode::I64ShrS,
            WI::I64ShrU => OpCode::I64ShrU,
            WI::I64Rotl => OpCode::I64Rotl,
            WI::I64Rotr => OpCode::I64Rotr,
            WI::I32WrapI64 => OpCode::I32WrapI64,
            WI::I64ExtendI32S => OpCode::I64ExtendI32S,
            WI::I64ExtendI32U => OpCode::I64ExtendI32U,
            WI::I32Extend8S => OpCode::I32Extend8S,
            WI::I32Extend16S => OpCode::I32Extend16S,
            WI::I64Extend8S => OpCode::I64Extend8S,
            WI::I64Extend16S => OpCode::I64Extend16S,
            WI::I64Extend32S => OpCode::I64Extend32S,
            WI::F32Eq => OpCode::F32Eq,
            WI::F32Ne => OpCode::F32Ne,
            WI::F32Lt => OpCode::F32Lt,
            WI::F32Gt => OpCode::F32Gt,
            WI::F32Le => OpCode::F32Le,
            WI::F32Ge => OpCode::F32Ge,
            WI::F64Eq => OpCode::F64Eq,
            WI::F64Ne => OpCode::F64Ne,
            WI::F64Lt => OpCode::F64Lt,
            WI::F64Gt => OpCode::F64Gt,
            WI::F64Le => OpCode::F64Le,
            WI::F64Ge => OpCode::F64Ge,
            WI::F32Abs => OpCode::F32Abs,
            WI::F32Neg => OpCode::F32Neg,
            WI::F32Ceil => OpCode::F32Ceil,
            WI::F32Floor => OpCode::F32Floor,
            WI::F32Trunc => OpCode::F32Trunc,
            WI::F32Nearest => OpCode::F32Nearest,
            WI::F32Sqrt => OpCode::F32Sqrt,
            WI::F32Add => OpCode::F32Add,
            WI::F32Sub => OpCode::F32Sub,
            WI::F32Mul => OpCode::F32Mul,
            WI::F32Div => OpCode::F32Div,
            WI::F32Min => OpCode::F32Min,
            WI::F32Max => OpCode::F32Max,
            WI::F32Copysign => OpCode::F32Copysign,
            WI::F64Abs => OpCode::F64Abs,
            WI::F64Neg => OpCode::F64Neg,
            WI::F64Ceil => OpCode::F64Ceil,
            WI::F64Floor => OpCode::F64Floor,
            WI::F64Trunc => OpCode::F64Trunc,
            WI::F64Nearest => OpCode::F64Nearest,
            WI::F64Sqrt => OpCode::F64Sqrt,
            WI::F64Add => OpCode::F64Add,
            WI::F64Sub => OpCode::F64Sub,
            WI::F64Mul => OpCode::F64Mul,
            WI::F64Div => OpCode::F64Div,
            WI::F64Min => OpCode::F64Min,
            WI::F64Max => OpCode::F64Max,
            WI::F64Copysign => OpCode::F64Copysign,
            WI::I32TruncF32S => OpCode::I32TruncF32S,
            WI::I32TruncF32U => OpCode::I32TruncF32U,
            WI::I32TruncF64S => OpCode::I32TruncF64S,
            WI::I32TruncF64U => OpCode::I32TruncF64U,
            WI::I64TruncF32S => OpCode::I64TruncF32S,
            WI::I64TruncF32U => OpCode::I64TruncF32U,
            WI::I64TruncF64S => OpCode::I64TruncF64S,
            WI::I64TruncF64U => OpCode::I64TruncF64U,
            WI::F32ConvertI32S => OpCode::F32ConvertI32S,
            WI::F32ConvertI32U => OpCode::F32ConvertI32U,
            WI::F32ConvertI64S => OpCode::F32ConvertI64S,
            WI::F32ConvertI64U => OpCode::F32ConvertI64U,
            WI::F32DemoteF64 => OpCode::F32DemoteF64,
            WI::F64ConvertI32S => OpCode::F64ConvertI32S,
            WI::F64ConvertI32U => OpCode::F64ConvertI32U,
            WI::F64ConvertI64S => OpCode::F64ConvertI64S,
            WI::F64ConvertI64U => OpCode::F64ConvertI64U,
            WI::F64PromoteF32 => OpCode::F64PromoteF32,
            WI::I32TruncSatF32S => OpCode::I32TruncSatF32S,
            WI::I32TruncSatF32U => OpCode::I32TruncSatF32U,
            WI::I32TruncSatF64S => OpCode::I32TruncSatF64S,
            WI::I32TruncSatF64U => OpCode::I32TruncSatF64U,
            WI::I64TruncSatF32S => OpCode::I64TruncSatF32S,
            WI::I64TruncSatF32U => OpCode::I64TruncSatF32U,
            WI::I64TruncSatF64S => OpCode::I64TruncSatF64S,
            WI::I64TruncSatF64U => OpCode::I64TruncSatF64U,
            _ => {
                unreachable!("not supported opcode: {:?}", self);
                // return Err(WazmError::NotSupportedOpcode);
            }
        };
        result.push(instr);
        Ok(())
    }
}
